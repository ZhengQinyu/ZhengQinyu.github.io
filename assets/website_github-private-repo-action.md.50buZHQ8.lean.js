import{_ as e,a as i,a2 as a,o as s}from"./chunks/framework.DAlL-BGO.js";const p="/assets/img-1.-nir0uzo.svg",d=JSON.parse('{"title":"Github私有仓库部署Pages","description":"","frontmatter":{"title":"Github私有仓库部署Pages","lastUpdated":"2024-11-28 22:22"},"headers":[],"relativePath":"website/github-private-repo-action.md","filePath":"website/github-private-repo-action.md","lastUpdated":1733807682000}'),r={name:"website/github-private-repo-action.md"};function o(l,t,n,u,c,h){return s(),i("div",null,t[0]||(t[0]=[a('<h3 id="背景介绍" tabindex="-1">背景介绍 <a class="header-anchor" href="#背景介绍" aria-label="Permalink to &quot;背景介绍&quot;">​</a></h3><p>使用 GitHub 私有仓库隐藏项目构建细节，同时可以保存一些隐私的个人配置信息；使用 GitHub Actions构建项目并生成展示的页面，再推送到 GitHub 公开仓库，通过 GitHub Pages展示并绑定域名访问。</p><h3 id="流程介绍" tabindex="-1">流程介绍 <a class="header-anchor" href="#流程介绍" aria-label="Permalink to &quot;流程介绍&quot;">​</a></h3><p><img src="'+p+'" alt="img-1.svg"></p><ul><li><p>1.本地仓库初始化</p><p>本地 <a href="/website/vitepress-init.html">初始化 vitepress 项目</a></p></li><li><p>2.提交到私有仓库</p><p>完成编写后Push到私有仓库，以下步骤详情见<a href="/website/github-pages-deploy.html">构建和部署</a></p></li><li><p>3.触发 GitHub Actions</p><p>推送到私有仓库后，在私有仓库中自动执行 GitHub Actions的构建任务，生成静态页面，再将生成的页面推送到公开仓库中。</p></li><li><p>4.部署并展示网页</p><p>推送到公开仓库后，通过 GitHub Pages 部署展示，同时绑定域名访问</p></li></ul>',5)]))}const m=e(r,[["render",o]]);export{d as __pageData,m as default};
