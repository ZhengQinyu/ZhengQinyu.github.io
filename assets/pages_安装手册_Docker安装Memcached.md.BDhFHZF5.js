import{_ as e,a as l,a2 as a,o as d}from"./chunks/framework.DAlL-BGO.js";const y=JSON.parse('{"title":"","description":"","frontmatter":{"lastUpdated":"2023-12-18 22:22"},"headers":[],"relativePath":"pages/安装手册/Docker安装Memcached.md","filePath":"pages/安装手册/Docker安装Memcached.md","lastUpdated":1733806965000}'),s={name:"pages/安装手册/Docker安装Memcached.md"};function i(n,t,c,r,g,p){return d(),l("div",null,t[0]||(t[0]=[a('<h2 id="_1-下载" tabindex="-1">1 下载 <a class="header-anchor" href="#_1-下载" aria-label="Permalink to &quot;1 下载&quot;">​</a></h2><p>下载镜像</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ docker pull memcached:1.5.16</span></span></code></pre></div><h2 id="_2-启动" tabindex="-1">2 启动 <a class="header-anchor" href="#_2-启动" aria-label="Permalink to &quot;2 启动&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ docker run --name my-memcache -p 11211:11211 -d memcached:1.5.16</span></span></code></pre></div><p>默认启动 <code>memcached</code>设置的最大容量是 <code>64M</code>,设置其他的容量，如 <code>128M</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ docker run --name my-memcache -p 11211:11211 -d memcached:1.5.16 memcached -m 128</span></span></code></pre></div><h2 id="_3-常用命令" tabindex="-1">3 常用命令 <a class="header-anchor" href="#_3-常用命令" aria-label="Permalink to &quot;3 常用命令&quot;">​</a></h2><p>使用<code>telnet</code>连接<code>memcached</code>，如果没有可以先安装</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ yum install -y telnet</span></span></code></pre></div><p>连接</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ telnet 127.0.1.1 11211</span></span></code></pre></div><p>连接后使用 <code>stats</code>可以查看运行信息，含义如下：</p><table tabindex="0"><thead><tr><th style="text-align:left;">参数</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:left;">pid</td><td style="text-align:left;">memcache服务器进程ID</td></tr><tr><td style="text-align:left;">uptime</td><td style="text-align:left;">服务器已运行秒数</td></tr><tr><td style="text-align:left;">time</td><td style="text-align:left;">服务器当前Unix时间戳</td></tr><tr><td style="text-align:left;">version</td><td style="text-align:left;">memcache版本</td></tr><tr><td style="text-align:left;">pointer_size</td><td style="text-align:left;">操作系统指针大小</td></tr><tr><td style="text-align:left;">rusage_user</td><td style="text-align:left;">进程累计用户时间</td></tr><tr><td style="text-align:left;">rusage_system</td><td style="text-align:left;">进程累计系统时间</td></tr><tr><td style="text-align:left;">curr_connections</td><td style="text-align:left;">当前连接数量</td></tr><tr><td style="text-align:left;">total_connections</td><td style="text-align:left;">Memcached运行以来连接总数</td></tr><tr><td style="text-align:left;">connection_structures</td><td style="text-align:left;">Memcached分配的连接结构数量</td></tr><tr><td style="text-align:left;">cmd_get</td><td style="text-align:left;">get命令请求次数</td></tr><tr><td style="text-align:left;">cmd_set</td><td style="text-align:left;">set命令请求次数</td></tr><tr><td style="text-align:left;">cmd_flush</td><td style="text-align:left;">flush命令请求次数</td></tr><tr><td style="text-align:left;">get_hits</td><td style="text-align:left;">get命令命中次数</td></tr><tr><td style="text-align:left;">get_misses</td><td style="text-align:left;">get命令未命中次数</td></tr><tr><td style="text-align:left;">delete_misses</td><td style="text-align:left;">delete命令未命中次数</td></tr><tr><td style="text-align:left;">delete_hits</td><td style="text-align:left;">delete命令命中次数</td></tr><tr><td style="text-align:left;">incr_misses</td><td style="text-align:left;">incr命令未命中次数</td></tr><tr><td style="text-align:left;">incr_hits</td><td style="text-align:left;">incr命令命中次数</td></tr><tr><td style="text-align:left;">decr_misses</td><td style="text-align:left;">decr命令未命中次数</td></tr><tr><td style="text-align:left;">decr_hits</td><td style="text-align:left;">decr命令命中次数</td></tr><tr><td style="text-align:left;">cas_misses</td><td style="text-align:left;">cas命令未命中次数</td></tr><tr><td style="text-align:left;">cas_hits</td><td style="text-align:left;">cas命令命中次数</td></tr><tr><td style="text-align:left;">cas_badval</td><td style="text-align:left;">使用擦拭次数</td></tr><tr><td style="text-align:left;">auth_cmds</td><td style="text-align:left;">认证命令处理的次数</td></tr><tr><td style="text-align:left;">auth_errors</td><td style="text-align:left;">认证失败数目</td></tr><tr><td style="text-align:left;">bytes_read</td><td style="text-align:left;">读取总字节数</td></tr><tr><td style="text-align:left;">bytes_written</td><td style="text-align:left;">发送总字节数</td></tr><tr><td style="text-align:left;">limit_maxbytes</td><td style="text-align:left;">分配的内存总大小（字节）， 例如默认是 <code>67108864</code>，即 67108864 / 1024 / 1024 = <code>64M</code></td></tr><tr><td style="text-align:left;">accepting_conns</td><td style="text-align:left;">服务器是否达到过最大连接（0/1）</td></tr><tr><td style="text-align:left;">listen_disabled_num</td><td style="text-align:left;">失效的监听数</td></tr><tr><td style="text-align:left;">threads</td><td style="text-align:left;">当前线程数</td></tr><tr><td style="text-align:left;">conn_yields</td><td style="text-align:left;">连接操作主动放弃数目</td></tr><tr><td style="text-align:left;">bytes</td><td style="text-align:left;">当前存储占用的字节数，即<code>使用量</code></td></tr><tr><td style="text-align:left;">curr_items</td><td style="text-align:left;">当前存储的数据总数</td></tr><tr><td style="text-align:left;">total_items</td><td style="text-align:left;">启动以来存储的数据总数</td></tr><tr><td style="text-align:left;">evictions</td><td style="text-align:left;">LRU释放的对象数目</td></tr><tr><td style="text-align:left;">reclaimed</td><td style="text-align:left;">已过期的数据条目来存储新数据的数目</td></tr></tbody></table><p>清除所有的缓存</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>flush_all</span></span></code></pre></div><p>退出</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>quit</span></span></code></pre></div>',18)]))}const h=e(s,[["render",i]]);export{y as __pageData,h as default};
