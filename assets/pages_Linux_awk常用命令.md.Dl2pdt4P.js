import{_ as s,a as e,a2 as n,o as p}from"./chunks/framework.DAlL-BGO.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{"lastUpdated":"2023-12-18 22:22"},"headers":[],"relativePath":"pages/Linux/awk常用命令.md","filePath":"pages/Linux/awk常用命令.md","lastUpdated":1733806965000}'),t={name:"pages/Linux/awk常用命令.md"};function i(l,a,c,d,o,b){return p(),e("div",null,a[0]||(a[0]=[n(`<h3 id="_1-准备文件" tabindex="-1">1. 准备文件 <a class="header-anchor" href="#_1-准备文件" aria-label="Permalink to &quot;1. 准备文件&quot;">​</a></h3><p>准备文件<code>test.log</code>，内容如下。三项分别是：<code>日期</code>，<code>项目</code>，<code>版本号</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&#39;2019年06月05日10:03:13&#39; aaa                   0e604b6b7fa0a5610c96aee0a8407d9b89b6732a</span></span>
<span class="line"><span>&#39;2019年06月25日15:14:36&#39; bbb                   e5fa8f4d2b08867df8cf47e6f8a2bb269043c7cb</span></span>
<span class="line"><span>&#39;2019年06月28日16:47:27&#39; bbb                   0727437c9e4d52ce0fcdb5276d6507d1c6ad5d65</span></span>
<span class="line"><span>&#39;2019年07月16日14:53:51&#39; ccc                   972b9389fc25e8cef21377967961a43275d8f136</span></span>
<span class="line"><span>&#39;2019年10月29日11:21:42&#39; aaa                   4fae5956698f1cc5b223957cf7197b826faa7fef</span></span>
<span class="line"><span>&#39;2019年10月29日11:33:38&#39; bbb                   08ba46a814eae69d37b90f2d075eb27ce62bb07f</span></span></code></pre></div><h3 id="_2-基本打印" tabindex="-1">2. 基本打印 <a class="header-anchor" href="#_2-基本打印" aria-label="Permalink to &quot;2. 基本打印&quot;">​</a></h3><ul><li>打印第一列</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ awk &#39;{print $1}&#39; test.log</span></span></code></pre></div><ul><li>打印整行</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ awk &#39;{print $0}&#39; test.log</span></span></code></pre></div><p>内置参数</p><blockquote><p>NR：行号 NF：总列数 $0：整行<br> $1-n：代表列序 , $1第一列，$n第n列</p></blockquote><ul><li>指定分割符</li></ul><p>默认按空格或TAB分割， 可以自定义，例如使用<code>#</code>作为分割符</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ awk -F &#39;#&#39; &#39;{print $3}&#39; test.log</span></span></code></pre></div><h3 id="_3-示例" tabindex="-1">3. 示例 <a class="header-anchor" href="#_3-示例" aria-label="Permalink to &quot;3. 示例&quot;">​</a></h3><p>awk 命令默认是按行扫描的，如果需要扫描的前后执行一些逻辑，可以按照以下的代码结构设置。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>awk &#39;BEGIN {之前的逻辑} {中间的扫描逻辑} END {之后的逻辑}&#39; test.log</span></span></code></pre></div><ul><li>脚本文件</li></ul><p>可以将执行程序写到文件里面，执行时设置执行脚本文件。例如脚本文件是<code>scriptfile</code>，执行如下</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ awk -f scriptfile test.log</span></span></code></pre></div><ul><li>去重</li></ul><p>删除示例文件中重复的项目，保留最后一条</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ awk &#39;{ line[$2] = $0 } END { for (key in line) { print line[key] } }&#39; test.log</span></span></code></pre></div><p>可以按照时间排序以下，用到 <code>sort</code>命令, <code>-k1</code>参数表示按照第一列排序。这里的变量<code>line</code>类似<code>map</code>，遍历输出。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ awk &#39;{ line[$2] = $0 } END { for (key in line) { print line[key] } }&#39; test.log | sort -k1</span></span></code></pre></div><ul><li>逆序输出</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ awk &#39;{ line[NR] = $0 } END { for (i = NR; i &gt; 0; --i) print line[i] }&#39; test.log</span></span></code></pre></div><ul><li>输出分割符</li></ul><p>在BEGIN初始化内置的分割符，之后再打印</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ awk &#39;BEGIN {OFS=&quot;#&quot;} {print $1,$2,$3}&#39; test.log</span></span></code></pre></div><p>打印结果</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&#39;2019年06月05日10:03:13&#39;#aaa#0e604b6b7fa0a5610c96aee0a8407d9b89b6732a</span></span>
<span class="line"><span>&#39;2019年06月25日15:14:36&#39;#bbb#e5fa8f4d2b08867df8cf47e6f8a2bb269043c7cb</span></span>
<span class="line"><span>&#39;2019年06月28日16:47:27&#39;#bbb#0727437c9e4d52ce0fcdb5276d6507d1c6ad5d65</span></span>
<span class="line"><span>&#39;2019年07月16日14:53:51&#39;#ccc#972b9389fc25e8cef21377967961a43275d8f136</span></span>
<span class="line"><span>&#39;2019年10月29日11:21:42&#39;#aaa#4fae5956698f1cc5b223957cf7197b826faa7fef</span></span>
<span class="line"><span>&#39;2019年10月29日11:33:38&#39;#bbb#08ba46a814eae69d37b90f2d075eb27ce62bb07f</span></span></code></pre></div>`,31)]))}const r=s(t,[["render",i]]);export{u as __pageData,r as default};
